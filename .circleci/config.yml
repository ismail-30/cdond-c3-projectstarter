version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws --region us-west-2 s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws --region us-west-2 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws --region us-west-2 cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and zip utilities
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation describe-stack-events --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> ~/output.out 2>&1
            cat ~/output.out 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                                    --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                                    --query 'Reservations[*].Instances[*].PublicDnsName' \
                                    --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            # show content of inventory.txt file
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  
#
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["dc:69:22:84:43:a0:f6:67:ef:a9:46:0e:cb:83:9f:cf"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            pip install awscli

      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=60  
            export ANSIBLE_CONNECTION_PLUGIN=ssh
            echo ENVIROMENT=production > "backend/.env"      
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"          
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"      
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"            
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"      
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"     
            echo "CONTENT OF backend/.env"      
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -v
      - destroy-environment:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

  # run-migrations:
  #   docker:
  #       - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #               curl https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi
  #     - revert-migrations:
  #         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  
  #     - destroy-environment:
  #         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip curl
  #           curl -sL https://rpm.nodesource.com/setup_10.x | bash -
  #           yum install -y nodejs              
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_PUBLIC_IP=$(aws --region us-west-2 ec2 describe-instances \
  #                                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #                                          --query 'Reservations[*].Instances[*].PublicDnsName' \
  #                                          --output text)
  #           export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
  #           echo "${API_URL}"
  #           echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           cat frontend/.env
      
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/frontend/.env
      
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure      
  #     - revert-migrations:
  #         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  
  #     - destroy-environment:
  #         Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #      requires: [run-migrations]
